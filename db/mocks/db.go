// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudwan/gohan/db (interfaces: DB)

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	options "github.com/cloudwan/gohan/db/options"
	transaction "github.com/cloudwan/gohan/db/transaction"
	schema "github.com/cloudwan/gohan/schema"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDB is a mock of DB interface
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Begin mocks base method
func (m *MockDB) Begin() (transaction.Transaction, error) {
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(transaction.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin
func (mr *MockDBMockRecorder) Begin() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockDB)(nil).Begin))
}

// BeginTx mocks base method
func (m *MockDB) BeginTx(arg0 context.Context, arg1 *transaction.TxOptions) (transaction.Transaction, error) {
	ret := m.ctrl.Call(m, "BeginTx", arg0, arg1)
	ret0, _ := ret[0].(transaction.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx
func (mr *MockDBMockRecorder) BeginTx(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockDB)(nil).BeginTx), arg0, arg1)
}

// Close mocks base method
func (m *MockDB) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockDBMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDB)(nil).Close))
}

// Conn mocks base method
func (m *MockDB) Conn() string {
	ret := m.ctrl.Call(m, "Conn")
	ret0, _ := ret[0].(string)
	return ret0
}

// Conn indicates an expected call of Conn
func (mr *MockDBMockRecorder) Conn() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Conn", reflect.TypeOf((*MockDB)(nil).Conn))
}

// Connect mocks base method
func (m *MockDB) Connect(arg0, arg1 string, arg2 int) error {
	ret := m.ctrl.Call(m, "Connect", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect
func (mr *MockDBMockRecorder) Connect(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockDB)(nil).Connect), arg0, arg1, arg2)
}

// DropTable mocks base method
func (m *MockDB) DropTable(arg0 *schema.Schema) error {
	ret := m.ctrl.Call(m, "DropTable", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropTable indicates an expected call of DropTable
func (mr *MockDBMockRecorder) DropTable(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropTable", reflect.TypeOf((*MockDB)(nil).DropTable), arg0)
}

// Options mocks base method
func (m *MockDB) Options() options.Options {
	ret := m.ctrl.Call(m, "Options")
	ret0, _ := ret[0].(options.Options)
	return ret0
}

// Options indicates an expected call of Options
func (mr *MockDBMockRecorder) Options() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockDB)(nil).Options))
}

// Purge mocks base method
func (m *MockDB) Purge() {
	m.ctrl.Call(m, "Purge")
}

// Purge indicates an expected call of Purge
func (mr *MockDBMockRecorder) Purge() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Purge", reflect.TypeOf((*MockDB)(nil).Purge))
}

// RegisterTable mocks base method
func (m *MockDB) RegisterTable(arg0 *schema.Schema, arg1, arg2 bool) error {
	ret := m.ctrl.Call(m, "RegisterTable", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterTable indicates an expected call of RegisterTable
func (mr *MockDBMockRecorder) RegisterTable(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTable", reflect.TypeOf((*MockDB)(nil).RegisterTable), arg0, arg1, arg2)
}

// Type mocks base method
func (m *MockDB) Type() string {
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockDBMockRecorder) Type() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockDB)(nil).Type))
}
